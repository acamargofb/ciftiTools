library(devtools)
roxygenize()
library(roxygen2)
library(roxygen2md)
roxygenize()
install.packages('roxygen2')
install.packages("roxygen2")
library(roxygen2)
roxygenize()
roxygenize()
install.packages('papayar')
roxygenize()
roxygenize()
roxygenize()
# Working directories
main_dir <- '~/Box Sync/RESEARCH/BayesGLM_Validation/data/HCP'
#main_dir <- '/N/project/BayesGLM_Validation/HCP/'
#wd_ts <- 'data_processed/subcortical/tseries/sess1'
wd_ts <- 'data_processed/timeseries'
wd_z <- 'data_processed/designmat'
wd_spde <- 'data_processed/subcortical/spde_subcortical'
wd_outfile <- 'results_subcortical'
setwd(main_dir)
# Working directories
main_dir <- '~/Box/RESEARCH/BayesGLM_Validation/data/HCP'
setwd(main_dir)
# Select id (do this in bash script once moved to cluster)
id <- '103818'
#location of subject meshes
fname_cifti <- file.path(wd_ts,'103818.sess1.tfMRI_MOTOR_RL.10k.dtseries.nii')
fname_gifti_left <- 'data_processed/subject_meshes/103818.L.midthickness.10k.surf.gii'
fname_gifti_right <- 'data_processed/subject_meshes/103818.R.midthickness.10k.surf.gii'
#design matrix
fname_Z <- paste0(id,'.sess1.tfMRI_MOTOR_RL.csv')
Z <- read.csv(file.path(wd_z, fname_Z), header=FALSE) #284x6
Z <- as.matrix(Z)
### Read in GIFTI surface geometry files if provided
do_left_surf <- (!is.null(fname_gifti_left))
do_left_surf
surf_left <- readGIfTI(fname_gifti_left)
library(gifti)
surf_left <- readGIfTI(fname_gifti_left)
names(surf_left)
#' @param cortex_right Data matrix for right cortex, with vertices in rows
#' @param surf_left Surface model for left cortex (a list with two elements, vertices and faces)
#' @param surf_right Surface model for right cortex (a list with two elements, vertices and faces)
#' @param subcortical Data matrix for subcortical locations, with voxels in rows
#' @param mask Volumetric brain mask for subcortical locations
#' @param labels Volumetric labels for subcortical ROIs
#'
#' @return Object of class 'cifti'
#' @export
#'
cifti_make <- function(cortex_left=NULL, cortex_right=NULL, surf_left=NULL, surf_right=NULL, subcortical=NULL, mask=NULL, labels=NULL){
#check argument compatibility
if(!is.null(subcortical)) { if(is.null(mask)) stop('If subcortical is provided, mask must be provided also.')} else mask <- NULL
if(!is.null(subcortical)) { if(is.null(labels)) stop('If subcortical is provided, labels must be provided also.')} else labels <- NULL
if(!is.null(cortex_left)) { if(class(cortex_left) != 'matrix') stop('cortex_left must be a matrix (or NULL), but it is not.') }
if(!is.null(cortex_right)) { if(class(cortex_right) != 'matrix') stop('cortex_right must be a matrix (or NULL), but it is not.') }
#check formatting of surf_left
if(!is.null(surf_left)){
if(class(surf_left) != 'list' | !all.equal(names(surf_left), c('vertices','faces')) ) stop('surf_left must be NULL or a list with two elements: vertices and faces')
if(!is.null(cortex_left)) { if(nrow(cortex_left) != nrow(surf_left$vertices)) stop('cortex_left and surf_left must have same number of vertices.')}
if(ncol(surf_left$vertices) != 3 | class(surf_left$vertices) != 'matrix') stop('surf_left$vertices must be a matrix with 3 columns')
if(ncol(surf_left$faces) != 3 | class(surf_left$faces) != 'matrix') stop('surf_left$faces must be a matrix with 3 columns')
if(min(surf_left$faces) == 0) stop('Vertex indexing in surf_left$faces should start at 1, not 0.')
}
#check formatting of surf_right
if(!is.null(surf_right)){
if(class(surf_right) != 'list' | !all.equal(names(surf_right), c('vertices','faces')) ) stop('surf_right must be NULL or a list with two elements: vertices and faces')
if(!is.null(cortex_right)) { if(nrow(cortex_right) != nrow(surf_right$vertices)) stop('cortex_right and surf_right must have same number of vertices.')}
if(ncol(surf_right$vertices) != 3 | class(surf_right$vertices) != 'matrix') stop('surf_right$vertices must be a matrix with 3 columns')
if(ncol(surf_right$faces) != 3 | class(surf_right$faces) != 'matrix') stop('surf_right$faces must be a matrix with 3 columns')
if(min(surf_right$faces) == 0) stop('Vertex indexing in surf_right$faces should start at 1, not 0.')
}
#check formatting of subcortical data
if(!is.null(subcortical)) {
if(class(subcortical) != 'matrix') stop('subcortical must be a matrix (or NULL), but it is not.')
if(length(dim(mask)) != 3) stop('mask must be a 3-dimensional array, but it is not.')
vals_mask <- sort(unique(as.vector(mask)))*1
if(!all.equal(vals_mask, c(0,1))) stop('mask must be logical or 0/1, but it is not.')
if(sum(mask) != nrow(subcortical)) stop(paste0('The number of voxels in the mask (',sum(mask),') must equal the number of rows in subcortical (',nrow(subcortical),'), but they do not match.'))
if(!all.equal(dim(mask),dim(labels))) stop('mask and labels must have the same dimensions, but they do not.')
}
check_cols <- c(ncol(cortex_left), ncol(cortex_right), ncol(subcortical))
if(length(unique(check_cols)) > 1) stop('If provided, cortex_left, cortex_right and subcortical must all have the same number of columns (measurements), but they do not.')
cifti_out <- vector('list', 6)
class(cifti_out) <- 'cifti'
names(cifti_out) <- c("CORTEX_LEFT","CORTEX_RIGHT","SURF_LEFT", "SURF_RIGHT", "VOL","LABELS")
if(!is.null(cortex_left)) cifti_out$CORTEX_LEFT <- cortex_left
if(!is.null(cortex_right)) cifti_out$CORTEX_RIGHT <- cortex_right
if(!is.null(surf_left)) cifti_out$SURF_LEFT <- surf_left
if(!is.null(surf_right)) cifti_out$SURF_RIGHT <- surf_right
if(!is.null(subcortical)){
cifti_out$VOL <- array(0, dim=c(dim(mask),ncol(subcortical)))
for(ii in 1:ncol(subcortical)){ cifti_out$VOL[,,,ii][mask==1] <- subcortical[,ii] }
cifti_out$LABELS <- labels
}
return(cifti_out)
}
basename('fname.dtseries.nii')
is.integer(10)
as.integer(10)
as.integer(10.1)
#location of subject meshes
fname_cifti <- file.path(wd_ts,'103818.sess1.tfMRI_MOTOR_RL.10k.dtseries.nii')
fname_gifti_left <- 'data_processed/subject_meshes/103818.L.midthickness.10k.surf.gii'
fname_gifti_right <- 'data_processed/subject_meshes/103818.R.midthickness.10k.surf.gii'
n_sess <- 1
fname_cifti[1]
fname_cifti2 <- rep(NA, n_sess)
cifti_dir <- dirname(fname_cifti[[1]])
cifti_dir
ss=1
cifti_extn <- get_cifti_extn(fname_cifti[ss])
fname_cifti2[ss] <- paste0(gsub(cifti_extn, fname_cifti[ss]), '.', resample, cifti_extn)
delete_helper_files <- FALSE
if(ss==1){ make_helper_files <- TRUE } else { make_helper_files <- FALSE }
#' Gets CIFTI file extension
#'
#' @param fname_cifti
#'
#' @return Character file extension of CIFTI file, e.g. 'dtseries.nii', 'dscalar.nii'.
#' @export
#'
get_cifti_extn <- function(fname_cifti){
fname_cifti <- basename(fname_cifti)
fname_parts <- unlist(strsplit(fname_cifti, split='.', fixed = TRUE)) #split by "."
extn <- paste(rev(fname_parts)[c(2,1)], collapse='.') #"dtseries.nii", "dscalar.nii", etc.
return(extn)
}
cifti_extn <- get_cifti_extn(fname_cifti[ss])
fname_cifti2[ss] <- paste0(gsub(cifti_extn, fname_cifti[ss]), '.', resample, cifti_extn)
delete_helper_files <- FALSE
if(ss==1){ make_helper_files <- TRUE } else { make_helper_files <- FALSE }
fname_cifti2[ss] <- paste0(gsub(cifti_extn, '', fname_cifti[ss]), '.', resample, cifti_extn)
resample=10000
fname_cifti2[ss] <- paste0(gsub(cifti_extn, '', fname_cifti[ss]), '.', resample, cifti_extn)
fname_cifti2
gsub(cifti_extn, '', fname_cifti[ss])
fname_cifti2[ss] <- paste0(gsub(cifti_extn, '', fname_cifti[ss]), resample, cifti_extn)
fname_cifti2
fname_cifti2[ss] <- paste0(gsub(cifti_extn, '', fname_cifti[ss]), resample, '.', cifti_extn)
fname_cifti2
delete_helper_files <- FALSE
resample=5000
fname_cifti2[ss] <- paste0(gsub(cifti_extn, '', fname_cifti[ss]), resample, '.', cifti_extn)
fname_cifti2
if(ss==1){ make_helper_files <- TRUE } else { make_helper_files <- FALSE }
cifti_resample(cifti_orig = fname_cifti[ss],
cifti_target = fname_cifti2[ss],
sphere_orig_L = fname_gifti_sphere_left,
sphere_orig_R = fname_gifti_sphere_right,
target_res = resample,
wb_cmd = wb_cmd,
make_helper_files = make_helper_files,
delete_helper_files = delete_helper_files)
library(ciftiTools)
cifti_resample(cifti_orig = fname_cifti[ss],
cifti_target = fname_cifti2[ss],
sphere_orig_L = fname_gifti_sphere_left,
sphere_orig_R = fname_gifti_sphere_right,
target_res = resample,
wb_cmd = wb_cmd,
make_helper_files = make_helper_files,
delete_helper_files = delete_helper_files)
wb_cmd <- '/Applications/workbench/bin_macosx64/wb_command'
cifti_resample(cifti_orig = fname_cifti[ss],
cifti_target = fname_cifti2[ss],
sphere_orig_L = fname_gifti_sphere_left,
sphere_orig_R = fname_gifti_sphere_right,
target_res = resample,
wb_cmd = wb_cmd,
make_helper_files = make_helper_files,
delete_helper_files = delete_helper_files)
file.path('mydrive', c('file1', 'file2'))
fnames_gifti = c('file1.surf.gii', 'file2.surf.gii')
resample
grep('surf.gii', paste0(resample,'.surf.gii'), fnames_gifti)
gsub('surf.gii', paste0(resample,'.surf.gii'), fnames_gifti)
fname_cifti
if(!is.numeric(resample)) stop('resample must be numeric')
if(round(resample) != resample) stop('resample must be an integer')
if(resample > 30000 | resample < 1000) stop('resample must be a number between 1,000 and 30,000')
cat(paste0('RESAMPLING CIFTI TIMESERIES FILES TO ', resample, ' RESOLUTION'))
fname_cifti2 <- rep(NA, n_sess)
cifti_dir <- dirname(fname_cifti[[1]])
cifti_dir
list.files(cifti_dir)
fname_cifti
fname_cifti2
cifti_extn <- get_cifti_extn(fname_cifti[ss])
fname_cifti2[ss] <- paste0(gsub(cifti_extn, '', fname_cifti[ss]), resample, '.', cifti_extn)
delete_helper_files <- FALSE
if(ss==1){ make_helper_files <- TRUE } else { make_helper_files <- FALSE }
fname_gifti2_left
fname_gifti2_left=NULL
fname_gifti2_right=NULL
fname_gifti_sphere_left
getwd()
fname_sphere_left = '../Sphere.10k.L.surf.gii'
fname_sphere_right = '../Sphere.10k.R.surf.gii'
fnames_sphere_orig <- c(fname_sphere_left, fname_sphere_left, fname_sphere_right, fname_sphere_right)
fnames_sphere_target <- file.path(cifti_dir, 'helper_files_resampling', c('Sphere.target.L.surf.gii', 'Sphere.target.L.surf.gii', 'Sphere.target.R.surf.gii', 'Sphere.target.R.surf.gii'))
fnames_sphere_target
list.files(data_processed/timeseries/helper_files_resampling/)
list.files('data_processed/timeseries/helper_files_resampling/')
nulls <- is.null(fnames_gifti)
nulls
fnames_gifti
c('a',NULL)
fnames_gifti <- c(fname_gifti_left, fname_gifti_right, fname_gifti2_left, fname_gifti2_right)
fnames_sphere_orig <- c(fname_sphere_left, fname_sphere_left, fname_sphere_right, fname_sphere_right)
fnames_sphere_target <- file.path(cifti_dir, 'helper_files_resampling', c('Sphere.target.L.surf.gii', 'Sphere.target.L.surf.gii', 'Sphere.target.R.surf.gii', 'Sphere.target.R.surf.gii'))
inds <- c(TRUE, TRUE, !is.null(fname_gifti2_left), !is.null(fname_gifti2_right))
fnames_sphere_orig <- fnames_sphere[inds]
fnames_sphere_target <- fnames_sphere_target[inds]
fnames_gifti_target <- gsub('surf.gii', paste0(resample,'.surf.gii'), fnames_gifti)
fnames_sphere_orig <- fnames_sphere_orig[inds]
fnames_gifti
fnames_gifti_target
fnames_sphere_orig
fnames_sphere_target
for(gg in 1:length(fnames_gifti)){
gifti_resample(gifti_orig = fnames_gifti[gg],
gifti_target = fnames_gifti_target[gg],
sphere_orig = fnames_sphere_orig[gg],
sphere_target = fnames_sphere_target[gg],
wb_cmd = wb_cmd)
}
getwd()
setwd('..')
# Working directories
main_dir <- '~/Box/RESEARCH/BayesGLM_Validation/data'
#main_dir <- '/N/project/BayesGLM_Validation/'
#wd_ts <- 'HCP/data_processed/subcortical/tseries/sess1'
wd_ts <- 'HCP/data_processed/timeseries'
wd_z <- 'HCP/data_processed/designmat'
wd_spde <- 'HCP/data_processed/subcortical/spde_subcortical'
wd_outfile <- 'HCP/results_subcortical'
setwd(main_dir)
# Select id (do this in bash script once moved to cluster)
id <- '103818'
#location of subject meshes
fname_cifti <- file.path(wd_ts,'103818.sess1.tfMRI_MOTOR_RL.10k.dtseries.nii')
fname_gifti_left <- 'data_processed/subject_meshes/103818.L.midthickness.10k.surf.gii'
fname_gifti_right <- 'data_processed/subject_meshes/103818.R.midthickness.10k.surf.gii'
fname_sphere_left <- 'Sphere.10k.L.surf.gii'
fname_sphere_right <- 'Sphere.10k.R.surf.gii'
#design matrix
fname_Z <- paste0(id,'.sess1.tfMRI_MOTOR_RL.csv')
Z <- read.csv(file.path(wd_z, fname_Z), header=FALSE) #284x6
Z <- as.matrix(Z)
cifti_dir <- dirname(fname_cifti[[1]])
cifti_dir
cat(paste0('RESAMPLING GIFTI SURFACE FILES TO ', resample, ' RESOLUTION'))
fnames_gifti <- c(fname_gifti_left, fname_gifti_right, fname_gifti2_left, fname_gifti2_right)
fnames_sphere_orig <- c(fname_sphere_left, fname_sphere_left, fname_sphere_right, fname_sphere_right)
fnames_sphere_target <- file.path(cifti_dir, 'helper_files_resampling', c('Sphere.target.L.surf.gii', 'Sphere.target.L.surf.gii', 'Sphere.target.R.surf.gii', 'Sphere.target.R.surf.gii'))
inds <- c(TRUE, TRUE, !is.null(fname_gifti2_left), !is.null(fname_gifti2_right))
fnames_sphere_orig <- fnames_sphere_orig[inds]
fnames_sphere_target <- fnames_sphere_target[inds]
fnames_gifti_target <- gsub('surf.gii', paste0(resample,'.surf.gii'), fnames_gifti)
fnames_gifti
fnames_gifti_target
fnames_sphere_orig
fnames_sphere_target
fname_gifti_left <- 'HCP/data_processed/subject_meshes/103818.L.midthickness.10k.surf.gii'
fname_gifti_right <- 'HCP/data_processed/subject_meshes/103818.R.midthickness.10k.surf.gii'
cat(paste0('RESAMPLING GIFTI SURFACE FILES TO ', resample, ' RESOLUTION'))
fnames_gifti <- c(fname_gifti_left, fname_gifti_right, fname_gifti2_left, fname_gifti2_right)
fnames_sphere_orig <- c(fname_sphere_left, fname_sphere_left, fname_sphere_right, fname_sphere_right)
fnames_sphere_target <- file.path(cifti_dir, 'helper_files_resampling', c('Sphere.target.L.surf.gii', 'Sphere.target.L.surf.gii', 'Sphere.target.R.surf.gii', 'Sphere.target.R.surf.gii'))
inds <- c(TRUE, TRUE, !is.null(fname_gifti2_left), !is.null(fname_gifti2_right))
fnames_sphere_orig <- fnames_sphere_orig[inds]
fnames_sphere_target <- fnames_sphere_target[inds]
fnames_gifti_target <- gsub('surf.gii', paste0(resample,'.surf.gii'), fnames_gifti)
gg=1
gifti_resample(gifti_orig = fnames_gifti[gg],
gifti_target = fnames_gifti_target[gg],
sphere_orig = fnames_sphere_orig[gg],
sphere_target = fnames_sphere_target[gg],
wb_cmd = wb_cmd)
for(gg in 1:length(fnames_gifti)){
gifti_resample(gifti_orig = fnames_gifti[gg],
gifti_target = fnames_gifti_target[gg],
sphere_orig = fnames_sphere_orig[gg],
sphere_target = fnames_sphere_target[gg],
wb_cmd = wb_cmd)
}
gg
for(gg in 2:length(fnames_gifti)){
gifti_resample(gifti_orig = fnames_gifti[gg],
gifti_target = fnames_gifti_target[gg],
sphere_orig = fnames_sphere_orig[gg],
sphere_target = fnames_sphere_target[gg],
wb_cmd = wb_cmd)
}
for(gg in 1:length(fnames_gifti)){
gifti_resample(gifti_orig = fnames_gifti[gg],
gifti_target = fnames_gifti_target[gg],
sphere_orig = fnames_sphere_orig[gg],
sphere_target = fnames_sphere_target[gg],
wb_cmd = wb_cmd,
overwrite = TRUE)
}
fname_gifti_left <- gsub('surf.gii', paste0(resample,'.surf.gii'), fname_gifti_left)
fname_gifti_right <- gsub('surf.gii', paste0(resample,'.surf.gii'), fname_gifti_right)
if(!is.null(fname_gifti2_left)) fname_gifti2_left <- gsub('surf.gii', paste0(resample,'.surf.gii'), fname_gifti2_left)
if(!is.null(fname_gifti2_right)) fname_gifti2_right <- gsub('surf.gii', paste0(resample,'.surf.gii'), fname_gifti2_right)
fname_gifti_left
fname_gifti_right
getwd()
setwd('~/Box/SOFTWARE/ciftiTools/')
roxygenize()
library(roxygen2)
roxygenize()
roxygenize()
library(ciftiTools)
roxygenize()
library(ciftiTools)
install_github('mandymejia/ciftiTools')
library(devtools)
install_github('mandymejia/ciftiTools')
